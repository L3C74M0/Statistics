package model;

import java.util.ArrayList;

public class Main {
	protected static final int[] RED = { 1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36 };
	protected static final int[] BLACK = { 2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35 };
	protected static ArrayList<Integer> group1_1to12 = new ArrayList<Integer>();
	protected static ArrayList<Integer> group2_13to24 = new ArrayList<Integer>();
	protected static ArrayList<Integer> group3_25to36 = new ArrayList<Integer>();
	protected static ArrayList<Integer> resultInRed = new ArrayList<Integer>();
	protected static ArrayList<Integer> resultInBlack = new ArrayList<Integer>();
	protected static ArrayList<Integer> result_1to18 = new ArrayList<Integer>();
	protected static ArrayList<Integer> result_19to36 = new ArrayList<Integer>();

	public static void main(String args[]) {

		int[] array = { 0, 36, 0, 35, 15, 7, 9, 3, 0, 10, 32, 0, 9, 34, 19, 0, 24 };

		int[] temp = { 0, 1, 2, 3, 4, 1, 6, 7, 8, 9, 1, 11, 12, 13, 1, 15, 16, 2, 18, 19, 20, 1, 22, 23, 2, 24, 26, 27,
				28, 29, 1, 30, 32, 33, 34, 35, 36, 0, 0, 0 };

		int[] completo = { 4, 36, 0, 35, 15, 7, 9, 3, 13, 10, 32, 12, 9, 34, 19, 0, 24, 33, 3, 9, 3, 11, 32, 35, 22, 1,
				32, 8, 23, 8, 35, 14, 17, 8, 22, 14, 6, 1, 17, 7, 22, 32, 7, 0, 17, 14, 30, 12, 16, 33, 21, 28, 15, 0,
				28, 5, 22, 26, 34, 24, 32, 20, 32, 21, 20, 27, 25, 16, 34, 12, 25, 10, 29, 15, 1, 15, 4, 24, 22, 17, 25,
				29, 5, 33, 20, 10, 27, 21, 15, 0, 26, 20, 14, 2, 13, 3, 13, 32, 35, 30, 5, 29, 4, 17, 12, 27, 24, 12,
				13, 3, 32, 13, 2, 30, 14, 16, 9, 31, 22, 13, 32, 24, 33, 5, 21, 0, 31, 4, 3, 36, 9, 11, 10, 34, 34, 32,
				31, 7, 13, 3, 35, 17, 11, 10, 6, 0, 10, 33, 23, 6, 7, 20, 35, 8, 9, 29, 21, 29, 4, 11, 29, 32, 30, 35,
				4, 19, 14, 27, 19, 30, 9, 15, 32, 7, 23, 28, 8, 11, 33, 31, 19, 35, 12, 22, 5, 9, 28, 19, 26, 32, 5, 30,
				36, 29, 19, 0, 22, 2, 26, 15, 4, 19, 4, 24, 16, 2, 19, 2, 17, 14, 14, 22, 21, 23, 27, 26, 34, 14, 30,
				24, 26, 3, 8, 13, 28, 1, 26, 13, 24, 17, 17, 15, 30, 20, 17, 30, 34, 28, 33, 36, 26, 34, 8, 18, 27, 24,
				16, 22, 3, 14, 0, 23, 26, 4, 19, 19, 21, 22, 10, 3, 32, 33, 22, 33, 33, 36, 0, 21, 3, 34, 26, 19, 7, 23,
				22, 10, 0, 17, 0, 20, 33, 35, 14, 31, 20, 3, 18, 1, 34, 0, 20, 31, 4, 32, 26, 25, 18, 34, 18, 15, 15,
				25, 36, 1, 0, 33, 0, 1, 6, 8, 13, 18, 30, 27, 9, 22, 15, 21, 11, 2, 31, 26, 31, 3, 11, 3, 3, 25, 36, 22,
				18, 12, 15, 12, 32, 35, 10, 11, 2, 9, 19, 6, 5, 29, 6, 18, 2, 30, 17, 36, 3, 8, 1, 1, 27, 16, 28, 30,
				14, 21, 27, 31, 31, 32, 7, 6, 17, 35, 6, 32, 10, 0, 10, 31, 30, 28, 16, 16, 28, 29, 20, 17, 4, 34, 9,
				35, 0, 34, 25, 7, 12, 17, 2, 29, 18, 13, 25, 28, 18, 4, 34, 1, 3, 12, 6, 18, 1, 12, 27, 19, 7, 21, 0,
				36, 25, 18, 8, 14, 25, 23, 30, 9, 16, 9, 0, 30, 21, 11, 2, 27, 5, 18, 28, 0, 11, 0, 15, 35, 13, 22, 31,
				9, 10, 24, 25, 3, 33, 18, 35, 34, 0, 2, 26, 2, 2, 4, 2, 23, 8, 19, 2, 14, 18, 13, 28, 24, 30, 0, 9, 26,
				4, 1, 31, 13, 12, 12, 7, 27, 14, 4, 26, 19, 36, 7, 13, 22, 18, 33, 33, 30, 20, 33, 10, 28, 14, 29, 21,
				25, 22, 25, 23, 24, 0, 0, 17, 34, 21, 18, 11, 22, 25, 11, 35, 11, 33, 8, 32, 13, 27, 36, 28, 36, 29, 11,
				21, 27, 10, 3, 4, 6, 6, 6, 23, 10, 11, 5, 13, 13, 2, 16, 0, 6, 3, 16, 8, 33, 28, 13, 34, 12, 34, 30, 35,
				27, 18, 17, 17, 0, 10, 16, 9, 14, 3, 10, 33, 13, 5, 11, 32, 24, 25, 11, 28, 1, 25, 1, 21, 10, 34, 17, 7,
				8, 35, 15, 10, 30, 20, 1, 29, 26, 14, 25, 7, 9, 30, 6, 19, 7, 31, 22, 18, 23, 2, 8, 6, 3, 31, 1, 11, 26,
				4, 36, 1, 9, 20, 21, 14, 21, 19, 13, 17, 34, 14, 1, 1, 18, 35, 24, 23, 2, 1, 29, 1, 6, 17, 31, 21, 35,
				31, 13, 9, 10, 36, 8, 14, 0, 12, 28, 5, 29, 14, 18, 1, 10, 19, 27, 22, 4, 19, 33, 18, 31, 10, 9, 16, 32,
				28, 28, 24, 19, 5, 27, 0, 24, 31, 16, 28, 7, 20, 22, 12, 21, 35, 18, 32, 22, 10, 7, 31, 24, 17, 31, 5,
				26, 10, 23, 13, 23, 11, 0, 26, 25, 21, 7, 32, 28, 28, 15, 21, 16, 34, 30, 27, 0, 18, 33, 1, 22, 33, 24,
				19, 22, 8, 28, 34, 13, 28, 1, 8, 25, 29, 28, 9, 12, 21, 21, 15, 14, 15, 8, 9, 4, 0, 12, 2, 11, 27, 21,
				11, 10, 8, 4, 20, 13, 2, 9, 2, 35, 14, 24, 17, 35, 33, 23, 6, 27, 34, 29, 2, 22, 25, 20, 10, 34, 13, 0,
				6, 18, 8, 30, 7, 26, 18, 6, 15, 12, 36, 5, 21, 22, 23, 20, 30, 18, 20, 35, 5, 29, 16, 13, 16, 13, 1, 24,
				17, 21, 28, 2, 17, 21, 31, 7, 29, 33, 20, 5, 11, 16, 29, 29, 33, 6, 17, 23, 29, 4, 5, 22, 30, 5, 34, 26,
				32, 16, 36, 30, 24, 18, 17, 18, 21, 19, 0, 26, 17, 7, 29, 4, 20, 1, 32, 27, 15, 19, 31, 6, 11, 18, 35,
				6, 16, 32, 22, 2, 23, 14, 10, 8, 29, 28, 17, 14, 6, 16, 9, 24, 19, 0, 22, 24, 24, 21, 13, 35, 5, 17, 29,
				2, 29, 9, 1, 20, 9, 28, 16, 0, 33, 34, 7, 4, 21, 19, 21, 31, 25, 7, 34, 24, 16, 7, 29, 5, 32, 22, 23,
				16, 11, 15, 15, 32, 6, 28, 18, 3, 14, 11, 23, 10, 20, 29, 11, 7, 22, 19, 22, 19, 0, 2, 15, 23, 33, 30,
				25, 32, 1, 27, 27, 5, 23, 28, 32, 2, 20, 2, 23, 29, 33, 6, 36, 27, 14, 0, 13, 8, 36, 30, 18, 1, 10, 12,
				18, 21, 36, 21, 28, 20, 11, 14, 25, 27, 7, 20, 33, 25, 22, 2, 24, 1, 24, 0, 33, 17, 19, 34, 27, 33, 36,
				7, 9, 25, 27, 15, 0, 11, 17, 1, 15, 11, 2, 10, 20, 14, 14, 21, 32, 28, 16, 13, 4, 13, 8, 31, 15, 34, 16,
				33, 22, 4, 8, 12, 8, 1, 16, 8, 26, 6, 6, 35, 18, 23, 28, 32, 23, 24, 8, 15, 29, 2, 25, 27, 9, 17, 28,
				34, 11, 36, 6, 31, 4, 16, 22, 13, 21, 29, 0, 21, 10, 0, 3, 7, 24, 3, 2, 22, 10, 15, 8, 2, 27, 14, 17, 8,
				22, 1, 5, 5, 19, 29, 18, 25, 34, 20, 25, 17, 35, 7, 2, 2, 3, 5, 6, 20, 30, 19, 24, 16, 0, 5, 31, 7, 7,
				19, 30, 8, 10, 22, 35, 26, 22, 17, 20, 9, 34, 31, 26, 22, 34, 3, 24, 31, 12, 14, 34, 34, 3, 3, 23, 19,
				10, 25, 0, 4, 21, 16, 5, 3, 22, 2, 8, 25, 36, 2, 4, 35, 21, 33, 22, 34, 23, 8, 12, 0, 10, 32, 21, 22,
				17, 22, 3, 8, 0, 10, 9, 6, 34, 19, 26, 6, 13, 22, 2, 33, 25, 20, 12, 11, 6, 34, 26, 22, 18, 15, 34, 5,
				13, 3, 11, 8, 5, 29, 9, 23, 14, 22, 2, 28, 28, 14, 15, 7, 19, 31, 1, 19, 13, 7, 19, 8, 16, 29, 31, 29,
				30, 32, 5, 22, 27, 16, 30, 34, 15, 5, 24, 23, 32, 13, 4, 6, 18, 20, 27, 14, 5, 19, 9, 17, 12, 19, 0, 4,
				15, 21, 8, 8, 16, 11, 15, 35, 18, 19, 21, 28, 32, 24, 22, 1, 19, 14, 31, 17, 24, 10, 14, 9, 1, 11, 17,
				31, 30, 26, 17, 15, 32, 1, 10, 28, 31, 4, 20, 3, 31, 4, 16, 0, 9, 33, 19, 28, 11, 8, 33, 3, 20, 28, 16,
				4, 33, 7, 35, 9, 31, 31, 15, 7, 12, 15, 4, 20, 17, 28, 15, 9, 4, 24, 28, 31, 6, 14, 1, 30, 34, 23, 3,
				17, 30, 0, 33, 8, 36, 3, 35, 25, 7, 19, 36, 6, 19, 29, 10, 28, 21, 1, 8, 23, 24, 30, 36, 35, 4, 20, 19,
				36, 22, 0, 35, 20, 23, 24, 4, 15, 23, 5, 5, 28, 7, 10, 30, 33, 19, 2, 24, 36, 0, 4, 5, 9, 32, 16, 12,
				23, 32, 0, 3, 0, 27, 10, 7, 22, 1, 9, 36, 8, 29, 12, 16, 13, 31, 18, 20, 24, 24, 5, 12, 9, 26, 17, 28,
				10, 22, 0, 17, 34, 1, 29, 33, 10, 2, 31, 33, 31, 36, 26, 17, 8, 17, 26, 24, 10, 17, 3, 17, 1, 13, 34, 6,
				20, 12, 31, 8, 10, 12, 30, 6, 18, 1, 8, 21, 24, 18, 3, 21, 22, 5, 2, 13, 13, 14, 2, 20, 10, 9, 16, 8,
				27, 34, 34, 34, 20, 4, 26, 5, 16, 14, 10, 3, 0, 1, 3, 33, 2, 1, 17, 7, 7, 22, 9, 0, 24, 16, 27, 15, 27,
				11, 13, 18, 10, 31, 31, 33, 15, 28, 21, 10, 0, 19, 9, 17, 13, 29, 2, 15, 33, 35, 14, 13, 23, 3, 10, 23,
				23, 10, 7, 6, 7, 33, 30, 30, 9, 23, 7, 31, 35, 29, 19, 2, 0, 2, 10, 33, 34, 27, 26, 17, 3, 32, 33, 35,
				6, 3, 11, 8, 24, 25, 2, 6, 1, 16, 28, 15, 10, 35, 29, 31, 28, 19, 24, 4, 11, 5, 20, 22, 9, 1, 31, 12,
				21, 10, 7, 4, 15, 24, 32, 0, 2, 11, 35, 15, 21, 33, 7, 14, 31, 1, 25, 30, 5, 31, 16, 19, 35, 12, 12, 12,
				21, 9, 9, 6, 11, 1, 21, 23, 26, 25, 9, 17, 5, 26, 2, 2, 20, 27, 28, 17, 6, 22, 31, 21, 27, 6, 26, 33,
				27, 14, 32, 13, 8, 1, 13, 30, 10, 1, 18, 16, 3, 9, 31, 13, 35, 9, 21, 17, 35, 20, 25, 18, 7, 19, 34, 34,
				26, 16, 24, 11, 6, 4, 25, 12, 33, 33, 19, 31, 17, 8, 24, 9, 24, 23, 28, 9, 1, 6, 11, 4, 4, 18, 19, 11,
				11, 21, 29, 0, 3, 32, 26, 30, 30, 22, 27, 4, 36, 5, 25, 35, 8, 9, 18, 27, 17, 23, 16, 4, 15, 21, 28, 24,
				8, 1, 31, 14, 13, 34, 36, 34, 26, 36, 3, 11, 28, 5, 23, 16, 9, 0, 22, 13, 34, 2, 19, 22, 2, 12, 10, 6,
				36, 35, 36, 30, 5, 0, 1, 0, 35, 23, 19, 21, 14, 33, 10, 17, 16, 28, 9, 4, 15, 23, 19, 33, 26, 13, 18,
				17, 34, 32, 20, 24, 23, 19, 30, 11, 17, 14, 32, 8, 8, 24, 28, 32, 30, 5, 30, 18, 1, 7, 2, 32, 1, 23, 12,
				28, 23, 27, 20, 31, 12, 16, 29, 7, 11, 10, 9, 26, 23, 35, 20, 19, 0, 21, 35, 22, 3, 14, 34, 17, 8, 18,
				36, 8, 31, 4, 12, 35, 32, 35, 0, 20, 30, 6, 15, 29, 1, 35, 23, 17, 14, 8, 20, 12, 20, 10, 36, 35, 11,
				22, 29, 33, 16, 0, 8, 14, 4, 1, 28, 12, 23, 12, 36, 7, 16, 3, 21, 2, 4, 7, 23, 32, 21, 33, 12, 0, 32, 9,
				16, 14, 32, 22, 34, 2, 21, 8, 22, 1, 3, 15, 23, 16, 25, 5, 36, 29, 13, 17, 16, 10, 36, 27, 8, 8, 5, 15,
				13, 6, 13, 20, 27, 34, 0, 33, 24, 1, 36, 30, 30, 22, 7, 14, 35, 21, 3, 6, 11, 7, 1, 3, 18, 20, 7, 3, 3,
				3, 34, 2, 28, 17, 35, 35, 17, 5, 10, 23, 34, 21, 29, 9, 29, 1, 20, 10, 8, 16, 4, 25, 17, 24, 7, 16, 9,
				27, 8, 26, 4, 35, 15, 4, 22, 34, 30, 5, 32, 17, 6, 3, 8, 3, 24, 14, 5, 7, 5, 27, 1, 27, 20, 3, 25, 3, 3,
				30, 31, 22, 15, 21, 26, 18, 11, 32, 2, 11, 9, 13, 4, 20, 25, 20, 20, 36, 8, 36, 24, 32, 26, 16, 5, 7,
				32, 36, 21, 2, 22, 32, 36, 11, 35, 3, 20, 24, 31, 20, 28, 35, 18, 9, 19, 33, 13, 6, 7, 2, 13, 13, 9, 12,
				12, 19, 13, 7, 7, 1, 14, 2, 19, 16, 2, 18, 3, 6, 19, 4, 10, 24, 10, 25, 34, 15, 14, 31, 26, 0, 34, 17,
				3, 8, 10, 35, 3, 26, 18, 25, 23, 33, 11, 32, 28, 22, 5, 22, 34, 28, 36, 36, 31, 27, 32, 21, 25, 3, 30,
				9, 4, 10, 15, 12, 19, 19, 17, 2, 15, 5, 29, 10, 13, 25, 25, 31, 13, 29, 2, 23, 30, 6, 26, 31, 28, 21,
				16, 20, 28, 0, 21, 34, 18, 1, 9, 19, 2, 35, 8, 22, 29, 9, 35, 3, 27, 7, 17, 33, 35, 10, 17, 14, 17, 35,
				17, 1, 15, 31, 20, 30, 30, 25, 10, 13, 13, 24, 13, 12, 31, 2, 2, 35, 36, 30, 28, 30, 17, 22, 30, 36, 28,
				24, 20, 2, 31, 12, 32, 29, 13, 14, 11, 32, 2, 36, 30, 13, 17, 24, 13, 36, 28, 18, 10, 21, 6, 8, 31, 13,
				20, 22, 30, 3, 11, 10, 18, 16, 26, 5, 14, 0, 18, 16, 32, 33, 24, 35, 25, 29, 33, 22, 36, 12, 14, 7, 3,
				10, 33, 19, 17, 18, 11, 0, 32, 8, 15, 13, 6, 30, 12, 18, 30, 5, 34, 24, 8, 11, 0, 11, 12, 19, 19, 31,
				31, 20, 35, 14, 9, 15, 31, 17, 4, 9, 13, 13, 7, 6, 9, 23, 8, 3, 9, 7, 7, 27, 9, 35, 14, 15, 25, 12, 33,
				1, 31, 14, 36, 2, 27, 29, 13, 27, 25, 36, 30, 17, 33, 29, 21, 31, 4, 8, 1, 33, 22, 12, 26, 36, 30, 27,
				29, 15, 34, 15, 36, 12, 4, 34, 31, 12, 3, 8, 24, 30, 17, 26, 33, 27, 9, 9, 2, 15, 1, 31, 1, 15, 4, 20,
				14, 16, 15, 0, 14, 24, 9, 0, 29, 24, 33, 32, 24, 30, 3, 33, 18, 0, 31, 19, 24, 10, 30, 20, 33, 2, 22,
				14, 13, 30, 32, 22, 34, 14, 26, 20, 24, 18, 36, 36, 33, 35, 11, 17, 33, 32, 2, 35, 3, 11, 29, 22, 28,
				25, 8, 23, 31, 18, 28, 36, 36, 21, 36, 31, 17, 26, 3, 9, 14, 36, 4, 2, 29, 32, 13, 23, 11, 16, 16, 36,
				31, 7, 36, 34, 13, 35, 14, 34, 5, 11, 24, 4, 21, 31, 27, 33, 7, 4, 12, 27, 0, 17, 36, 27, 30, 27, 0, 21,
				5, 10, 23, 9, 26, 14, 19, 8, 10, 13, 18, 8, 18, 25, 25, 16, 22, 5, 5, 20, 6, 23, 35, 6, 29, 23, 30, 15,
				24, 1, 27, 19, 1, 29, 35, 23, 23, 7, 10, 30, 13, 10, 15, 32, 1, 19, 1, 13, 19, 8, 20, 3, 7, 36, 13, 11,
				16, 20, 16, 19, 6, 15, 21, 25, 23, 10, 10, 11, 5, 11, 27, 9, 29, 0, 23, 5, 31, 31, 9, 23, 11, 0, 24, 34,
				25, 16, 1, 30, 8, 11, 17, 7, 21, 11, 5, 33, 11, 26, 21, 5, 36, 33, 29, 15, 13, 2, 23, 5, 31, 22, 13, 26,
				19, 30, 29, 24, 8, 29, 5, 31, 7, 30, 35, 24, 8, 1, 1, 32, 30, 32, 35, 5, 20, 6, 10, 6, 1, 22, 32, 16,
				20, 27, 31, 4, 16, 0, 19, 10, 18, 20, 34, 15, 1, 31, 3, 27, 15, 29, 26, 34, 9, 29, 10, 27, 25, 34, 23,
				1, 15, 32, 29, 22, 6, 5, 26, 29, 17, 36, 32, 7, 5, 16, 11, 25, 13, 30, 22, 2, 36, 1, 14, 9, 2, 30, 31,
				2, 6, 29, 33, 28, 32, 1, 13, 1, 28, 18, 32, 12, 34, 36, 11, 24, 17, 23, 3, 2, 27, 5, 12, 20, 27, 25, 35,
				19, 16, 14, 12, 20, 21, 0, 23, 14, 4, 17, 34, 31, 17, 22, 9, 10, 35, 0, 12, 23, 19, 28, 24, 19, 13, 34,
				9, 29, 8, 31, 18, 5, 36, 15, 10, 6, 20, 25, 1, 33, 35, 27, 24, 24, 18, 7, 13, 29, 30, 4, 11, 30, 27, 34,
				24, 23, 0, 4, 24, 32, 6, 5, 14, 18, 7, 18, 0, 14, 35, 11, 8, 16, 34, 19, 19, 3, 24, 29, 9, 24, 13, 14,
				33, 36, 2, 34, 35, 25, 17, 26, 2, 35, 33, 14, 34, 30, 16, 16, 9, 25, 4, 32, 10, 8, 2, 9, 14, 30, 36, 7,
				28, 26, 23, 22, 21, 13, 11, 11, 15, 1, 24, 23, 5, 29, 16, 8, 5, 21, 30, 3, 7, 15, 22, 30, 18, 10, 25,
				27, 34, 28, 0, 5, 3, 30, 35, 27, 0, 32, 28, 27, 7, 23, 26, 32, 28, 3, 11, 16, 34, 2, 16, 35, 12, 28, 29,
				1, 12, 14, 8, 13, 17, 22, 22, 28, 31, 35, 10, 23, 31, 36, 7, 7, 26, 7, 34, 18, 17, 21, 33, 33, 2, 20, 5,
				26, 35, 25, 28, 36, 17, 23, 18, 32, 4, 19, 33, 35, 3, 35, 35, 5, 28, 30, 7, 9, 5, 20, 9, 5, 21, 26, 33,
				27, 21, 4, 14, 1, 8, 21, 6, 22, 22, 27, 29, 1, 13, 31, 4, 33, 17, 35, 1, 5, 15, 30, 14, 7, 17, 9, 2, 21,
				33, 20, 20, 26, 9, 13, 11, 19, 30, 22, 30, 19, 24, 19, 0, 18, 23, 27, 8, 33, 17, 28, 11, 12, 1, 27, 34,
				10, 23, 12, 33, 30, 13, 27, 35, 32, 22, 36, 28, 15, 22, 7, 14, 15, 32, 21, 3, 34, 8, 3, 32, 31, 14, 15,
				32, 2, 25, 32, 5, 0, 33, 29, 23, 34, 24, 13, 17, 12, 31, 18, 23, 24, 17, 25, 18, 23, 35, 25, 35, 14, 15,
				14, 4, 34, 3, 24, 30, 30, 28, 10, 10, 27, 4, 11, 7, 33, 29, 22, 3, 6, 30, 14, 25, 10, 33, 34, 36, 21,
				36, 32, 12, 5, 32, 12, 33, 22, 12, 2, 24, 25, 17, 8, 26, 12, 13, 25, 9, 22, 29, 15, 23, 21, 14, 33, 36,
				16, 18, 32, 26, 10, 36, 3, 9, 35, 20, 15, 32, 30, 16, 10, 11, 21, 7, 7, 17 };

		for (int i = 0; i < 37; i++) {
			System.out.println("\n-------------------------------------------------------------\n");
			try {
				ArrayList<Integer> result = count(temp, i);
				System.out.println("\t\tDespues de " + i + ": " + result.size());
				// System.out.println("#1: " + result.get(0));
				// System.out.println("#2: " + result.get(1));

				clasify(result);

				redOrBlack(result);

				calculatePercentage(result.size());

				printRedAndBlackPercentage(result.size());

				finalClasification(result);
				// finalClasification(resultInBlack);
				printLastClasification(result.size());

				clasifyEvenAndOdd(result);

				resultInRed = new ArrayList<Integer>();
				resultInBlack = new ArrayList<Integer>();
				result_1to18 = new ArrayList<Integer>();
				result_19to36 = new ArrayList<Integer>();
			} catch (Exception e) {
				System.out.println(">>>>>>>>>>>> Numero " + i + " No esta <<<<<<<<<<<");
			}
			System.out.println("\n");
		}

	}

	protected static ArrayList<Integer> count(int[] array, int num) {
		ArrayList<Integer> resultTmp = new ArrayList<Integer>();
		for (int i = 0; i < array.length; i++) {
			if (array[i] == num) {
				try {
					resultTmp.add(array[i + 1]);
				} catch (Exception e) {
				}
			}
		}
		return resultTmp;
	}

	protected static void clasify(ArrayList<Integer> result) {
		group1_1to12 = new ArrayList<Integer>();
		group2_13to24 = new ArrayList<Integer>();
		group3_25to36 = new ArrayList<Integer>();

		for (int i = 0; i < result.size(); i++) {
			if (result.get(i) >= 1 && result.get(i) <= 12) {
				group1_1to12.add(result.get(i));
			} else if (result.get(i) >= 13 && result.get(i) <= 24) {
				group2_13to24.add(result.get(i));
			} else if (result.get(i) >= 25 && result.get(i) <= 36) {
				group3_25to36.add(result.get(i));
			}
		}

		// int total = group1_1to12.size() + group2_13to24.size() +
		// group3_25to36.size();

		// double percentage1to12 = group1_1to12.size() / total;
		// double percentage13to24 = group2_13to24.size() / total;
		// double percentage25to36 = group3_25to36.size() / total;
	}

	protected static void redOrBlack(ArrayList<Integer> result) {
		// int reds = 0;
		// int blacks = 0;
		// int no = 0;

		for (int i = 0; i < result.size(); i++) {
			// System.out.println("Numero a comparar: " + result.get(i));
			if (search(RED, result.get(i))) {
				// System.out.println("El numero " + result.get(i) +" es RED");
				// reds++;
				resultInRed.add(result.get(i));
			} else if (search(BLACK, result.get(i))) {
				// System.out.println("El numero " + result.get(i) +" es BLACK");
				// blacks++;
				resultInBlack.add(result.get(i));
			} else {
				// System.out.println("El numero " + result.get(i) +" no clasifico");
				// no++;
			}
		}

		// System.out.println("Red: " + reds);
		// System.out.println("Black: " + blacks);
		// System.out.println("No: " + no);

		printNumbersInGroups();
	}

	protected static boolean search(int[] array, int num) {
		boolean tmp = false;
		for (int i = 0; i < array.length; i++) {
			if (array[i] == num) {
				tmp = true;
			}
		}
		return tmp;
	}

	protected static void printNumbersInGroups() {
		String group1to12 = "";
		for (int i = 0; i < group1_1to12.size(); i++) {
			group1to12 += group1_1to12.get(i) + "  ";
		}
		System.out.println("Grupo 1 - 1  a 12 >>> " + group1to12);

		String group13to24 = "";
		for (int i = 0; i < group2_13to24.size(); i++) {
			group13to24 += group2_13to24.get(i) + "  ";
		}
		System.out.println("Grupo 2 - 13 a 24 >>> " + group13to24);

		String group25to36 = "";
		for (int i = 0; i < group3_25to36.size(); i++) {
			group25to36 += group3_25to36.get(i) + "  ";
		}
		System.out.println("Grupo 3 - 25 a 36 >>> " + group25to36);
	}

	protected static void calculatePercentage(int result) {
		// System.out.println("\tResult >>> " + result + " - Del 1 al 12: " +
		// group1_1to12.size());
		int group1to12 = group1_1to12.size();
		int group13to24 = group2_13to24.size();
		int group25to36 = group3_25to36.size();

		double tmpPercentageGroup1 = (double) 100 * group1to12 / result;
		double tmpPercentageGroup2 = (double) 100 * group13to24 / result;
		double tmpPercentageGroup3 = (double) 100 * group25to36 / result;

		System.out.println("\n\t\tPercentage");
		System.out.println("Grupo 1 - 1  a 12 >>> " + tmpPercentageGroup1 + " %");
		System.out.println("Grupo 2 - 13 a 24 >>> " + tmpPercentageGroup2 + " %");
		System.out.println("Grupo 3 - 25 a 36 >>> " + tmpPercentageGroup3 + " %");
	}

	protected static void printRedAndBlackPercentage(int total) {
		int tmpRed = resultInRed.size();
		int tmpBlack = resultInBlack.size();

		String reds = "";
		for (int i = 0; i < resultInRed.size(); i++) {
			reds += resultInRed.get(i) + "  ";
		}

		String blacks = "";
		for (int i = 0; i < resultInBlack.size(); i++) {
			blacks += resultInBlack.get(i) + "  ";
		}

		double red = (double) 100 * tmpRed / total;
		double black = (double) 100 * tmpBlack / total;

		System.out.println("\n\t\tPorcentage Rojos Negros");
		System.out.println("TOTAL >>> " + total);
		System.out.println("ROJO  >>> " + red + " <<< " + reds);
		System.out.println("NEGRO >>> " + black + " <<< " + blacks);
	}

	protected static void finalClasification(ArrayList<Integer> result) {
		for (int i = 0; i < result.size(); i++) {
			if (result.get(i) >= 1 && result.get(i) <= 18) {
				result_1to18.add(result.get(i));
			} else if (result.get(i) >= 19 && result.get(i) <= 36) {
				result_19to36.add(result.get(i));
			}
		}
	}

	protected static void printLastClasification(int total) {
		String str_1to18 = "";
		String str_19to36 = "";
		for (int i = 0; i < result_1to18.size(); i++) {
			str_1to18 += result_1to18.get(i) + "  ";
		}

		for (int i = 0; i < result_19to36.size(); i++) {
			str_19to36 += result_19to36.get(i) + "  ";
		}

		int tmp1to18 = result_1to18.size();
		int tmp19to36 = result_19to36.size();

		double final1to18 = (double) 100 * tmp1to18 / total;
		double final19to36 = (double) 100 * tmp19to36 / total;

		System.out.println("\n\t\tClasification");
		System.out.println("1  al 18 >>> " + final1to18 + " <<< " + str_1to18);
		System.out.println("19 al 36 >>> " + final19to36 + " <<< " + str_19to36);
	}

	public static boolean itsEven(int number) {
		return number % 2 == 0;
	}

	public static void clasifyEvenAndOdd(ArrayList<Integer> result) {
		int even = 0;
		int odd = 0;

		for (int i = 0; i < result.size(); i++) {
			if (result.get(i) != 0) {
				if (itsEven(result.get(i))) {
					even++;
				} else {
					odd++;
				}
			}
		}

		double evenPercentage = (double) 100 * even / result.size();
		double oddPercentage = (double) 100 * odd / result.size();

		System.out.println("\n\t\tPares e impares");
		System.out.println("PAR   >>> " + evenPercentage);
		System.out.println("IMPAR >>> " + oddPercentage);
	}
}
